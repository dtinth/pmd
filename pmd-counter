#!/usr/bin/env node

var $ = require('NodObjC')
require('uvcf').ref()

var timeLeft = '...'

$.import('Cocoa')

var MyAppDelegate = $.NSObject.extend('MyAppDelegate')

function number(string, fallback) {
  var n = +string
  return isNaN(n) ? fallback : n
}

var duration = number(process.argv[2], 25) * 60 + number(process.argv[3], 0)

MyAppDelegate.addMethod('applicationDidFinishLaunching:', 'v@:@', function(self, _, notification) {

  var menu = $.NSMenu('alloc')('init')
  var item = menu('addItemWithTitle', $('Void'), 'action', 'void:', 'keyEquivalent', $(''))
  var statusBar = $.NSStatusBar('systemStatusBar')

  var status = statusBar('_statusItemWithLength', 0, 'withPriority', 2147483646)
  statusBar('removeStatusItem', status)
  statusBar('_insertStatusItem', status, 'withPriority', 2147483646)

  status('retain')
  status('setLength', 0)
  status('setMenu', menu)
  status('setHighlightMode', true)
  status('setLength', $.NSVariableStatusItemLength)
  status('setTitle', $('...'))

  var start = new Date().getTime()
  var finish = start + duration * 1000

  function update() {
    var seconds = Math.floor((finish - new Date().getTime()) / 1000)
    var m = Math.floor(seconds / 60)
    var s = seconds % 60
    if (seconds < 0) {
      quit(0)
    } else {
      status('setTitle', $((timeLeft = m + ':' + (s < 10 ? '0' : '') + s)))
    }
  }

  var interval = setInterval(update, 1000)

  function quit(code) {
    clearInterval(interval)
    statusBar('removeStatusItem', status)
    status('release')
    process.exit(code)
  }

  self._void = function() {
    quit(1)
  }

})

MyAppDelegate.addMethod('void:', 'v@:@', function(self, _, sender) {
  self._void()
})

MyAppDelegate.register()

var net = require('net')

function error(e) {
  console.error(e)
}

var server = net.createServer(function(socket) {
  try {
    socket.on('error', error)
    socket.end(timeLeft)
  } catch (e) {
    error(e)
  }
})

try {
  require('fs').unlinkSync('/tmp/pomodoro.sock')
} catch (e) {
  // cannot delete
}

server.on('error', error)
server.listen('/tmp/pomodoro.sock')

var pool = $.NSAutoreleasePool('alloc')('init')
var app  = $.NSApplication('sharedApplication')
app('setDelegate', MyAppDelegate('alloc')('init'))
app('run')
